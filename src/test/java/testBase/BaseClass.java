package testBase;import org.apache.commons.lang3.RandomStringUtils;import org.openqa.selenium.OutputType;import org.openqa.selenium.Platform;import org.openqa.selenium.TakesScreenshot;import org.openqa.selenium.WebDriver;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.edge.EdgeDriver;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import org.testng.annotations.AfterClass;import org.testng.annotations.BeforeClass;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.net.URL;import java.text.SimpleDateFormat;import java.time.Duration;import java.util.Date;import java.util.Properties;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.testng.annotations.Parameters;public class BaseClass {    public static WebDriver driver;    public Logger logger;    public Properties p;    @BeforeClass (groups = {"Regression", "Sanity","Master"})    @Parameters({"os","browser"})    public void setup(String os, String br) throws InterruptedException, IOException {        //loading properties file        FileReader file = new FileReader("./src//test//resources//config.properties");        p = new Properties();        p.load(file);        logger = LogManager.getLogger(this.getClass());  //LOG4J2        if(p.getProperty("execution_env").equalsIgnoreCase("remote")) {            DesiredCapabilities capabilities = new DesiredCapabilities();            //OS            if (os.equalsIgnoreCase("windows")) {                capabilities.setPlatform(Platform.WIN11);            } else if (os.equalsIgnoreCase("mac"))            {                capabilities.setPlatform(Platform.MAC);            }            else if(os.equalsIgnoreCase("linux"))            {                capabilities.setPlatform(Platform.LINUX);            }            else            {                System.out.println("No matching system");                return;            }            //browser            switch (br.toLowerCase())            {                case "chrome": capabilities.setBrowserName("chrome");break;                case "edge": capabilities.setBrowserName("MicrosoftEdge");break;                case "firefox": capabilities.setBrowserName("firefox");break;                default:                    System.out.println("no matching browser");return;            }            //driver = new RemoteWebDriver(new URL("http://192.168.50.236:4444/wd/hub"), capabilities);            driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), capabilities);//            driver = new RemoteWebDriver(new URL("http://localhost:5554/wd/hub"), capabilities);        }        if(p.getProperty("execution_env").equalsIgnoreCase("local")) {            switch (br.toLowerCase()) {                case "chrome":                    driver = new ChromeDriver();                    break;                case "firefox":                    driver = new FirefoxDriver();                    break;                case "edge":                    driver = new EdgeDriver();                    break;                default:                    System.out.println("invalid browser");                    return;            }        }       // driver = new ChromeDriver();        driver.manage().deleteAllCookies();        driver.get(p.getProperty("appurl2"));       // driver.get("https://demo.opencart.com/en-gb?route=common/home");        //driver.get("https://tutorialsninja.com/demo/");        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));        driver.manage().window().maximize();        //  Thread.sleep(5000);    }    @AfterClass(groups = {"Regression", "Sanity","Master"})    public void teardown()    {        driver.quit();    }    public String randomString()    {        String generatedString = RandomStringUtils.randomAlphabetic(5);        return generatedString;    }    public String randomNumber()    {        String generatednum = RandomStringUtils.randomNumeric(10);        return generatednum;    }    public String randomAlphaNumeric()    {        String generatedString = RandomStringUtils.randomAlphabetic(5);        String generatednum = RandomStringUtils.randomNumeric(3);        return (generatedString+"@"+generatednum);    }    public String captureScreen(String tname) throws IOException {        String timeStamp = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());        TakesScreenshot takesScreenshot = (TakesScreenshot) driver;        File sourceFile = takesScreenshot.getScreenshotAs(OutputType.FILE);        String targetFilePath = System.getProperty("user.dir")+"\\screenshots\\" + tname+ "_" + timeStamp + ".png";        File targetFile = new File(targetFilePath);        sourceFile.renameTo(targetFile);        return targetFilePath;    }}